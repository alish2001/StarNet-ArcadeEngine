############################################################################################################
#                                                                                                          #
#                                 ###The Star Network's ArcadeEngine Manual###                             #
#                                                                                                          #
#                                       ###By: Ali | alish2001 | Ali_##                                    #
#                                                                                                          #
#                                                                                                          #
#                                                                                                          #
#                                     ###Copyright 2015 ©StarNetwork.LTD##                                 #
############################################################################################################


                                      ------------ Table Of Contents ------------
                                               --- 1. Game Creation---
                                           --- 2. Custom MapType Creation---
                                       --- 3. How to Create a GameProperties File---
                                          --- 4. Creating Kits and Skills ---
                                          --- 5. Scoreboard Management ---

               *NOTE: The things explained in the guide below can be found in the code just by going to the place's specified.
                             Thus the effort to put code snippet's inside the manual were not needed.

                                         ------------ Game Creation ------------
                                      
- Step 1 | The Class:
    Create your game class the extends game and add your values to it.
    Make sure to set all the ArrayList's to a new and fresh arraylist before adding anything to them.
    Then create your GameProperties file, and add your game description. *SideNote: only the first 3 entries to the list are shown.
    as shown with other games. Then add a get method for you game in the GameInstancer class.
    The method formatting should be like this: forge_abbriviation of game name_GClass() Ex. forge_DS_GClass();
        *Proceed to the 'How to create a GameProperties File' section of this guide for help on creating your GameProperties file.

- Step 2 | The Custom Map *Not Always Needed*:
    If your game uses a custom MapType, then proceed to create it first. Do not continue with other stuff before you have the MapType.
    This is crucial as you WILL need to specify a MapType when you add your game to the GameType enum.
        *Proceed to the 'Custom MapType Creation' section of this guide for help on creating your custom MapType.
    
- Step 3 | Addition into the System & Kits:
    Now you can add your game to the GameType enum, make sure to use the GameInstancer instance of your class when adding it to the enum.
    The last step is to add the game into the getAllGameTypes() method located in the 'All' class 
    in the Utils package(com.starnetmc.ArcadeEngine.Utils.All) as shown.
    That's it! The Game is in the system baby. Now you can proceed to creating your kits and skills for the game!
        *Proceed to the 'Creating Kits and Skills' section of this guide for help on creating your Kits/Skills.
    
    
    
    
    
    
    
                                      ------------ Custom MapType Creation ------------
-  This part of the guide will guide you through creating a custom MapType.

- Step 1 | The Class & Variables:
    Make your map class which extends Map and add the constructor.
    Add your custom variables, in this case Locations as 'private's and copy the register(); void from the Map class and paste it
    into your custom map class. The proceed to add the @Override annotation on the register(); method and then register your
    variables inside the register(); method. Then you can proceed to use the addParam(); method in the Custom MapType class constructor
    and add a string *NO SPACE'S* for each of the variables as their parameter name. Keep in my that these exact strings will be used
    in the MapCommand class for 'Set' parameters. *Note: When adding params add the abbreviation of the MapType into the back of the param.
    Ex. DSMap, the custom params are called: DSwordSpawn, DSPortalSpawn. This make sure that variable params will not collide as names such as
    'portal' are common.

- Step 2 | Addition into the MapType System:
    You may now proceed to add your map class in the MapType enum. Be sure to include a nullifed class of your map and get the params from it.
    Then you should go to the 'All' class in the Utils package(com.starnetmc.ArcadeEngine.Utils.All) and in the getAllMapTypes(); method
    add your MapType to the list. Then go to the Mapper class and to the bottom of the forgeMapFromConfig(); method. There is a section for adding
    custom MapTypes. Simply open an if statement for your MapType and get the custom vars needed from the config and return the forged map as an
    instance of YOUR map class.

- Step 3 | Registration Commands
        Now you can proceed to the MapCommand class. There you can find the 'create' section of the command and simply add your if statement
        with your map type and add an instance of YOUR map CLASS into the creation hashmap and not the DEFAULT map class as shown with other
        MapTypes. Then proceed to the 'Set' section of the command and add your if statements with the commands you have. REMEMBER to name
        them the same as your params. Be sure to also put a comment above that section and specify what MapType you are adding these for.
        Also be sure to add a check to see if the map they are setting params for is an is an instance of your custom map class. You can
        copy the code entered in the 'DSMap' area or any other custom map that has this and just paste it right after your args check and
        change the class instance.
        
- Step 4 | Party!
        WOOOOHOOOOOOOOOOO! Now that was easy wasn't it? All thanks to me c: No you have your own custom MapType that you can use in
        your games. Now when you want to use your custom variables in your game. Just get the active map from the Mapper and cast it as
        your custom map class!
    
    
    
    